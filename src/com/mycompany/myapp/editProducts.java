package com.mycompany.myapp;

import com.codename1.components.ImageViewer;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.Log;
import com.codename1.io.NetworkEvent;
import com.codename1.io.NetworkManager;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Font;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import java.io.IOException;
import com.codename1.ui.Toolbar;
import com.codename1.ui.URLImage;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.plaf.Style;
import erando.models.Product;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Map;






/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class editProducts {

    private Form current;
    private Resources theme;
    private String fileName;
    private String filePath;
    private int currentUser=1;
    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);
        
        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
        
    }
    
    public void start() throws IOException {
        Form f = new Form("Modifier les produits", BoxLayout.y());
        
        Style s = UIManager.getInstance().getComponentStyle("TitleCommand");
        FontImage ajouterIcon = FontImage.createMaterial(FontImage.MATERIAL_ADD, s);
        FontImage modifierIcon = FontImage.createMaterial(FontImage.MATERIAL_EDIT, s);
        FontImage afficherIcon = FontImage.createMaterial(FontImage.MATERIAL_DASHBOARD, s);
        FontImage exitIcon = FontImage.createMaterial(FontImage.MATERIAL_WARNING, s);
        Command cAjouter = new Command("Ajouter");
        Command cModifier = new Command("Modifier / Supprimer");
        Command cAfficher = new Command("Afficher");
        Command cExit = new Command("Exit");
        f.getToolbar().addCommandToSideMenu(cAjouter);
        f.getToolbar().addCommandToSideMenu(cModifier);
        f.getToolbar().addCommandToSideMenu(cAfficher);
        f.getToolbar().addCommandToSideMenu(cExit);
        ArrayList<Product> productsList = getOwn(currentUser);
        System.err.println(productsList);
        f.addCommandListener(e->{
            if(e.getCommand()==cAjouter){
                try {
                    new MyApplication().start();
                } catch (IOException ex) {
                }
           
            }
            if(e.getCommand()==cModifier){
                try {
                    new editProducts().start();
                } catch (IOException ex) {
                }
            }
            if(e.getCommand()==cAfficher){
                try {
                    new showAll().start();
                } catch (IOException ex) {
                }
            }
            if(e.getCommand()==cExit){
                
            }
        });
        Container ctn2 = new Container();
        Container ctn1 = new Container( BoxLayout.x());
         
         
        Font fnt = Font.createTrueTypeFont("fontello", "fontello.ttf");
        int size = Display.getInstance().convertToPixels(4);
        FontImage fm = FontImage.createFixed("\ue800", fnt, 0xff0000, size, size);
        FontImage fm1 = FontImage.createFixed("\ue803", fnt, 0xff0000, size, size);
        
        for (Product p : productsList) {
            ctn2 = new Container(new BoxLayout(BoxLayout.X_AXIS));
            ctn2.setScrollableX(true);
            ctn1 = new Container( BoxLayout.x());
            ctn1.setScrollableX(true);
            Label l = new Label(p.getTitre());
            Button rmB = new Button(fm);
            rmB.setUIID("rmB");
            Button edB = new Button(fm1);
            edB.setUIID("edB");
            ctn1.add(edB);
            ctn1.add(rmB);
            ctn1.getAllStyles().setMarginLeft(260);
            ctn2.add(l);
            ctn2.add(ctn1);
            //Listen to edit action
            edB.addActionListener(e->{
                try {
                    new editProduct(p.getId()).start();
                } catch (IOException ex) {
                }
                });
            //Listen to remove action
            rmB.addActionListener(e->{
                deleteProduct(p.getId());
                });
            
            
            f.addComponent(ctn2);
            
        }
        
       
        f.setScrollableY(true);
         f.show();
    }
    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
    }
   public ArrayList<Product> getOwn(int id) {
        ArrayList<Product> am = new ArrayList<>();

        ConnectionRequest con = new ConnectionRequest() {
            @Override
            protected void readResponse(InputStream in) throws IOException {

                JSONParser json = new JSONParser();
                try {
                    Reader reader = new InputStreamReader(in, "UTF-8");
                    Map<String, Object> data = json.parseJSON(reader);
                    ArrayList<Map<String, Object>> list = (ArrayList<Map<String, Object>>) data.get("produit");
                    am.clear();

                    for (Map<String, Object> obj : list) {
                        Product me = new Product();
                        me.setId(Integer.parseInt(obj.get("id").toString()));
                        me.setTitre(obj.get("titre").toString());
                        me.setDescription(obj.get("description").toString());
                        me.setIdMember(Integer.parseInt(obj.get("idMembre").toString()));
                        me.setPrix(Float.parseFloat(obj.get("prix").toString()));
                        me.setDate(obj.get("dateAdd").toString());
                        me.setImage(obj.get("imageName").toString());
                        me.setType(obj.get("type").toString());
                        am.add(me);
                    }

                } catch (IOException err) {
                    Log.e(err);
                }
            }

        };
        con.setUrl("http://localhost/erandomobile/getOwn.php?id="+id);
        con.setPost(false);
        NetworkManager.getInstance().addToQueueAndWait(con);
        if (am == null) {
            return null;
        } else {
            return am;
        }
    }
   public void deleteProduct(int id){
                ConnectionRequest req = new ConnectionRequest();
                req.setUrl("http://localhost/erandomobile/delete.php?id="+id);
                
                req.addResponseListener(new ActionListener<NetworkEvent>() {

                    @Override
                    public void actionPerformed(NetworkEvent evt) {
                        
                        byte[] data = (byte[]) evt.getMetaData();
                        String s = new String(data);
                        System.out.println(s);
                        if (s.equals("success")) {
                            Dialog.show("Confirmation", "success", "Ok", null);
                        } else {
                            Dialog.show("Erreur", "erreur", "Ok", null);
                        }
                    }
                });

                NetworkManager.getInstance().addToQueue(req);
            }
    
}
